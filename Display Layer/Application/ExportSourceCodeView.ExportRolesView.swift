//
//  ExportRolesView.swift
//  Hippocampus
//
//  Created by Guido Kühn on 20.07.24.
//

import Grisu
import SwiftUI

extension ExportSourceCodeView {
    struct ExportRolesView: View {
        // MARK: Properties

        @Environment(\.document) var document
        @State var fileUrl: URL?
        @State var selectedRoles: [Structure.Role] = []
        @State var importFile = false
        @State var showExportConfirmation = false
        @State var showDeleteConfirmation = false

        let formatter: DateFormatter = {
            let formatter = DateFormatter()
            formatter.dateFormat = "dd.MM.yyyy HH:mm"
            return formatter
        }()

        // MARK: Computed Properties

        var roles: [Structure.Role] {
            document.structure.roles
                .filter { $0 != Structure.Role.same }
                .sorted(by: { $0.name.localized($0.isLocked) < $1.name.localized($1.isLocked) })
        }

        var rolesSourceCode: String {
            //        let selectedRoles = selectedRoles
            //            .compactMap { document[Structure.Role.self, $0] }

            var result = """
            //
            //  Structure.Role+static.swift
            //  Hippocampus
            //
            //  Created by Guido Kühn on 19.06.24.
            //  Generated by Hippocampus on \(formatter.string(from: Date())).
            //

            import Foundation
            import SwiftUI
            import Grisu

            extension Structure.Role {
                typealias Role = Structure.Role
                typealias Aspect = Structure.Aspect
                typealias Particle = Structure.Particle


            """
            result += "\tstatic var statics: [Role] = [.same, "
            result += selectedRoles
                .filter { $0 != Structure.Role.same }
                .sorted(by: { $0.name < $1.name })
                .map { ".\($0.name.sourceCode)" }
                .joined(separator: ", ")
            result += "]\n\n"

            result += Structure.Role.same.sourceCode(tab: 0, inline: false, document: document) + "\n"
            for role in selectedRoles
                .filter({ $0 != Structure.Role.same })
                .sorted(by: { $0.name < $1.name })
            {
                result += role.sourceCode(tab: 0, inline: false, document: document) + "\n"
            }
            result += "}"
            return result
        }

        // MARK: Content

        var body: some View {
            VStack(alignment: .leading) {
                Form {
                    Text(fileUrl?.path ?? "No file selected")
                        .onTapGesture {
                            importFile.toggle()
                        }
                        .fileImporter(
                            isPresented: $importFile,
                            allowedContentTypes: [.swiftSource],
                            allowsMultipleSelection: false
                        ) { result in
                            switch result {
                            case let .success(files):
                                let file = files.first!
                                let gotAccess = file.startAccessingSecurityScopedResource()
                                if !gotAccess { return }
                                analyzeFile(file)
                                file.stopAccessingSecurityScopedResource()
                            case let .failure(error):
                                // handle error
                                print(error)
                            }
                        }
                    SelectorView(data: roles, selection: $selectedRoles) { Text($0.description) }
                    Text(rolesSourceCode)
                        .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .topLeading)
                        .font(.system(size: 8))
                }
                .formStyle(.grouped)

                HStack {
                    Button("Create static role") {
                        let role = Structure.Role()
                        role.name = "Static Role"
                        try! document.$structure.addStaticObject(item: role)
                    }

                    Button("Export") {
                        showExportConfirmation.toggle()
                    }
                    .disabled(selectedRoles.isEmpty || fileUrl == nil)
                    .confirmationDialog("Export", isPresented: $showExportConfirmation) {
                        Button("Export") {
                            Task {
                                guard let fileUrl, fileUrl.startAccessingSecurityScopedResource() else { return }
                                try! rolesSourceCode.write(to: fileUrl, atomically: true, encoding: .utf8)
                                fileUrl.stopAccessingSecurityScopedResource()
                                selectedRoles
                                    .filter { !$0.isStatic }
                                    .forEach {
                                        do {
                                            try document.$structure.makeObjectStatic(item: $0)
                                        } catch {}
                                    }
                                showDeleteConfirmation = selectedRoles.contains(where: { !$0.isStatic })
                            }
                        }
                    }
                    .confirmationDialog("Delete", isPresented: $showDeleteConfirmation) {
                        Button("Delete") {
                            Task {
                                selectedRoles
                                    .filter { !$0.isStatic }
                                    .forEach {
                                        document.delete($0)
                                    }
                            }
                        }
                    }
                }
                .padding()
                .frame(maxWidth: .infinity, alignment: .trailing)
            }
        }

        // MARK: Functions

        func analyzeFile(_ file: URL) {
            let text = try! String(contentsOf: file, encoding: .utf8)
            let regex = /static var statics: \[Role\] = \[(.*)\]/
            guard
                let line = text.split(separator: "\n").first(where: { $0.contains(regex) }),
                let match = try? regex.firstMatch(in: line)?.1
            else { return }
            selectedRoles = match.split(separator: ", ")
                .map { String($0.dropFirst()) }
                .compactMap { name in document.structure.roles.first(where: { $0.name.sourceCode == name }) }
                .filter { $0 != Structure.Role.same }
            fileUrl = file
        }
    }

    #Preview {
        ExportSourceCodeView()
            .environment(\.doc, HippocampusApp.previewDocument)
    }
}
